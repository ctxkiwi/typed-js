// Code generated by go-bindata.
// sources:
// src/core/types.tjs
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcCoreTypesTjs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x5d\x6a\xc3\x30\x0c\x7e\xcf\x29\xf4\xb8\x42\x4e\x50\x4a\xa1\x83\xed\x69\xac\x83\xf5\x02\x8e\xed\x34\x1a\x9e\x14\x6c\x79\xa4\xb4\xbd\xfb\x88\x9d\xa4\x34\x5d\x47\x9f\xc2\x17\x7d\xfe\x7e\xa4\xc2\xd8\x1a\xc9\x42\x10\x1f\xb5\xf4\x1f\xa4\x7d\x09\xda\xa9\x10\xe0\x33\x21\x38\x16\x00\x00\x48\xc6\x76\xdb\x7a\x09\x75\x24\xfd\x94\x89\x0b\x40\x92\x34\xd5\x8d\xf2\x1b\x19\x86\x48\xb2\x18\xa4\xd2\xd0\x59\xda\x4b\xb3\x9c\xc8\xa1\x75\x28\x33\x21\xe5\xbd\x3a\xac\x32\x5a\x67\x56\xac\x82\xf8\x8b\x64\xd9\xbf\x3f\x51\x74\xee\x14\x29\xc7\x36\x93\xcd\xb9\x98\x35\xa1\xf8\x5d\x59\x3f\x36\x79\x4f\x68\x68\x22\xfc\xd2\xb5\x4c\x96\x04\x95\xbb\xe8\xff\xa1\x9a\xd9\xaf\xd8\x59\xf3\x00\xef\x8d\xb5\x72\x36\x2f\xed\xaa\xdd\x2c\x74\x09\x5c\x7d\x59\x2d\x2b\x45\x87\xf5\x5d\xb5\x0f\x6f\x35\x06\x64\xfa\xd7\xf9\xa6\x77\xc5\xec\xc6\xd6\xcf\xcc\x6e\xea\x7c\x95\xeb\xfe\xfb\x74\x87\x51\x60\xd3\x83\x87\xee\x3f\x3f\x71\x1b\x43\x33\x50\x77\x0b\xf8\x61\x34\xf9\x37\xb7\x53\x82\xdd\xad\x79\xde\xcb\xe8\xbe\x4d\x08\x8e\xc5\xb9\xf8\x0d\x00\x00\xff\xff\xa8\x8e\x2b\x58\xa7\x02\x00\x00")

func srcCoreTypesTjsBytes() ([]byte, error) {
	return bindataRead(
		_srcCoreTypesTjs,
		"src/core/types.tjs",
	)
}

func srcCoreTypesTjs() (*asset, error) {
	bytes, err := srcCoreTypesTjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/core/types.tjs", size: 679, mode: os.FileMode(420), modTime: time.Unix(1610664263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/core/types.tjs": srcCoreTypesTjs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"core": &bintree{nil, map[string]*bintree{
			"types.tjs": &bintree{srcCoreTypesTjs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

